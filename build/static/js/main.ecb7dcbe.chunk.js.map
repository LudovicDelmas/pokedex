{"version":3,"sources":["helpers/format-type.ts","components/pokemon-card.tsx","services/pokemon-service.ts","pages/pokemon-list.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","App.tsx","index.tsx"],"names":["formatType","type","color","PokemonCard","pokemon","borderColor","useState","setColor","history","useHistory","className","onClick","id","push","onMouseEnter","onMouseLeave","style","src","picture","alt","name","types","map","key","PokemonService","fetch","then","response","json","data","isEmpty","Object","keys","length","PokemonList","pokemons","setPokemons","useEffect","getPokemons","PokemonsDetail","match","setPokemon","getPokemon","params","width","margin","to","pv","cp","PageNotFound","PokemonForm","value","isValid","form","setForm","hasType","includes","handleInputChange","e","fieldName","target","fieldValue","newField","validateForm","newForm","test","error","isTypesValid","onSubmit","preventDefault","handleSubmit","htmlFor","onChange","marginBottom","disabled","checked","contact","filter","currentType","selectType","PokemonEdit","App","exact","path","component","PokemonDetail","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.ecb7dcbe.chunk.js","sourcesContent":["const formatType = (type: string): string => {\n    let color: string;\n   \n    switch (type) {\n      case 'Feu': \n        color = 'red lighten-1'; \n        break; \n      case 'Eau': \n        color = 'blue lighten-1'; \n        break; \n      case 'Plante': \n        color = 'green lighten-1'; \n        break; \n      case 'Insecte': \n        color = 'yellow darken-3'; \n        break; \n      case 'Normal': \n        color = 'grey lighten-3'; \n        break; \n      case 'Vol': \n        color = 'blue lighten-3'; \n        break; \n      case 'Poison': \n        color = 'deep-purple accent-1'; \n        break; \n      case 'FÃ©e': \n        color = 'pink lighten-4'; \n        break; \n      case 'Psy': \n        color = 'deep-purple darken-2'; \n        break; \n      case 'Electrik': \n        color = 'lime accent-1'; \n        break; \n      case 'Combat': \n        color = 'deep-orange'; \n        break; \n      default: \n        color = 'grey'; \n        break; \n    }\n   \n    return `chip ${color}`;\n}\n\nexport default formatType;","import React, { FunctionComponent, useState } from 'react';\nimport Pokemon from '../models/pokemon';\nimport './pokemon-card.css';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\nimport { useHistory } from 'react-router-dom';\n \ntype Props = {\n    pokemon: Pokemon,\n    borderColor?: string\n};\n\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = '#009688'}) => {\n    const [color, setColor] = useState<string>();\n    const history = useHistory();\n\n    const showBorder = () =>{\n      setColor(borderColor);\n    }\n\n    const hideBorder = () =>{\n      setColor('#f5f5f5');\n    }\n\n    const goToPokemon = (id: number )=> {\n      history.push(`/pokemons/${id}`);\n    }\n\n    return(\n        <div className=\"col s6 m4\" onClick = {() => goToPokemon(pokemon.id)} onMouseEnter = {showBorder} onMouseLeave = {hideBorder}>\n        <div className=\"card horizontal\" style={{ borderColor: color }}>\n          <div className=\"card-image\"> \n            <img src={pokemon.picture} alt={pokemon.name}/>\n          </div>\n          <div className=\"card-stacked\">\n            <div className=\"card-content\">\n              <p>{pokemon.name}</p>\n              {/* <p><small>{formatDate(pokemon.created)}</small></p> */}\n              {pokemon.types.map(type => (\n                <span key={type} className={formatType(type)}>{type}</span>\n              ))}\n            </div>\n          </div>\n        </div> \n      </div>\n    );\n}\n\nexport default PokemonCard;","import Pokemon from \"../models/pokemon\";\n \nexport default class PokemonService {\n \n  static getPokemons(): Promise<Pokemon[]> {\n    return fetch('http://localhost:3001/pokemons')\n      .then(response => response.json());\n  }\n \n  static getPokemon(id: number): Promise<Pokemon|null> {\n    return fetch(`http://localhost:3001/pokemons/${id}`)\n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data);\n  }\n \n  static isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n  }\n}","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport Pokemon from '../models/pokemon';\nimport PokemonCard from '../components/pokemon-card';\nimport PokemonService from '../services/pokemon-service';\n  \nconst PokemonList: FunctionComponent = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  \n  useEffect(() => {\n    PokemonService.getPokemons().then(pokemons => setPokemons(pokemons));\n  }, []);\n  \n  return (\n    <div>\n      <h1 className=\"center\">PokÃ©mon</h1>\n      <div className=\"container\"> \n        <div className=\"row\"> \n        {pokemons.map(pokemon => (\n          <PokemonCard key={pokemon.id} pokemon={pokemon}/>\n        ))}\n        </div>\n      </div>\n    </div> \n  );\n}\n  \nexport default PokemonList;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\n\n  \ntype Params = { id: string };\n  \nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\n\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n          <div className=\"col s12 m8 offset-m2\"> \n            <h2 className=\"header center\">{ pokemon.name }</h2>\n            <div className=\"card hoverable\"> \n              <div className=\"card-image\">\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n                <Link to = {`/pokemons/edit/${pokemon.id}`} className=\"btn btn-floating halfway-fab waves-effect waves-light\">\n                  <i className=\"material-icons\">edit</i>\n                </Link>\n              </div>\n              <div className=\"card-stacked\">\n                <div className=\"card-content\">\n                  <table className=\"bordered striped\">\n                    <tbody>\n                      <tr> \n                        <td>Nom</td> \n                        <td><strong>{ pokemon.name }</strong></td> \n                      </tr>\n                      <tr> \n                        <td>Points de vie</td> \n                        <td><strong>{ pokemon.pv }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>DÃ©gÃ¢ts</td> \n                        <td><strong>{ pokemon.cp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Types</td> \n                        <td>\n                          {pokemon.types.map(type => (\n                           <span key={type} className={formatType(type)}>{type}</span>\n                          ))}</td> \n                      </tr> \n                      {/* <tr> \n                        <td>Date de crÃ©ation</td> \n                        <td>{formatDate(pokemon.created)}</td> \n                      </tr> */}\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"card-action\">\n                  <Link to=\"/pokedex\">Retour</Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <h4 className=\"center\">Aucun pokÃ©mon Ã  afficher !</h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n  \nconst PageNotFound: FunctionComponent = () => {\n  \n  return (\n    <div className=\"center\">\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvÃ©e\"/>\n      <h1>Hey, cette page n'existe pas !</h1> \n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\n        Retourner Ã  l'accueil\n      </Link>\n    </div>\n  );\n}\n  \nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service'\n  \ntype Props = {\n  pokemon: Pokemon\n  // isEditForm : boolean\n};\n\ntype Field = {\n  value?: any,\n  error?: string,\n  isValid?: boolean\n}\n\ntype Form = {\n  picture: Field,\n  name: Field,\n  pv: Field,\n  cp: Field,\n  types: Field,\n}\n  \nconst PokemonForm: FunctionComponent<Props> = ({pokemon}) => {\n\n  const history = useHistory();\n\n  const [form, setForm] = useState<Form>({\n    picture: { value: pokemon.picture },\n    name: { value: pokemon.name, isValid: true },\n    pv: { value: pokemon.pv, isValid: true },\n    cp: { value: pokemon.cp, isValid: true },\n    types: { value: pokemon.types, isValid: true },\n  });\n  \n  const types: string[] = [\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'FeÌe', 'Vol', 'Combat', 'Psy'\n  ];\n\n  const  hasType = (type: string): boolean => {\n    return form.types.value.includes(type);\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = {[fieldName]: { value: fieldValue }};\n\n    setForm({ ...form, ...newField });\n  }\n\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n    const checked = e.target.checked;\n    let newField: Field;\n\n    if(checked) {\n      //Si l'utilisateur coche un type, l'ajoute Ã  la liste des types de pokÃ©mon.\n      const newTypes: string[] = form.types.value.contact([type]);\n      newField = { value: newTypes };\n    } else {\n      //Si l'utilisateur dÃ©coche un type, on le retire de la liste des types du pokÃ©mon\n      const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n      newField = { value: newTypes };\n    }\n\n    setForm({...form, ...{ types: newField }});\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n\n    if(isFormValid){\n      pokemon.picture = form.picture.value;\n      pokemon.name = form.name.value;\n      pokemon.pv = form.pv.value;\n      pokemon.cp = form.cp.value;\n      pokemon.types = form.types.value;\n      // isEditForm ? updatePokemon() : addPokemon();\n    }\n  }\n\n  const validateForm = () => {\n    let newForm: Form = form;\n\n     // Validator url\n    //  if(isAddForm()) {\n\n    //   const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n    //   const end = \".png\";\n\n    //   if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\n    //     const errorMsg: string = 'L\\'url n\\'est pas valide.';\n    //     const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false };\n    //     newForm = { ...newForm, ...{ picture: newField } };\n    //   } else {\n    //     const newField: Field = { value: form.picture.value, error: '', isValid: true };\n    //     newForm = { ...newForm, ...{ picture: newField } };\n    //   }\n    // }\n\n    //validator name\n    if(!/^[a-zA-ZÃ Ã©Ã¨ ] {3,25}$/.test(form.name.value)){\n      const errorMsg: string = 'Le nom du pokÃ©mon est requis (1-25).';\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ name: newField } };\n    } else {\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ name: newField } };\n    }\n\n    //validator pv\n    if(!/^[0-9] {1,3}$/.test(form.pv.value)){\n      const errorMsg: string = 'Les points de vie du pokÃ©mon sont compris entre 0 et 999.';\n      const newField: Field = { value: form.pv.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ pv: newField } };\n    } else {\n      const newField: Field = { value: form.pv.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ pv: newField } };\n    }\n\n    //validator cp\n    if(!/^[0-9] {1,2}$/.test(form.cp.value)){\n      const errorMsg: string = 'Les dÃ©gats du pokÃ©mon sont compris entre 0 et 99.';\n      const newField: Field = { value: form.cp.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ cp: newField } };\n    } else {\n      const newField: Field = { value: form.cp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ cp: newField } };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.pv.isValid && newForm.cp.isValid;\n  }\n\n  const isTypesValid = (type: string): boolean => {\n    if(form.types.value.length === 1 && hasType(type)){\n      return false;\n    }\n\n    if(form.types.value.length >= 3 && !hasType(type)){\n      return false;\n    }\n\n    return true;\n  }\n\n  // const deletePokemon = () => {\n  //   PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\n  // }\n\n  // // const isAddForm = (): boolean => {\n  // //   return !isEditForm;\n  // // }\n\n  // const addPokemon = () => {\n  //   PokemonService.addPokemon(pokemon).then(() => history.push(`/pokemons`));\n  // }\n\n  // const updatePokemon = () => {\n  //   PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n  // }\n\n   \n  return (\n    <form onSubmit={e => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\"> \n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value = {form.name.value} onChange = {e => handleInputChange(e)}></input>\n                  {form.name.error &&\n                  <div className=\"card-panel red accent-1\">\n                    {form.name.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"pv\">Point de vie</label>\n                  <input id=\"pv\" name=\"pv\" type=\"number\" className=\"form-control\" value = {form.pv.value} onChange = {e => handleInputChange(e)}></input>\n                  {form.pv.error &&\n                  <div className=\"card-panel red accent-1\">\n                    {form.pv.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">DÃ©gÃ¢ts</label>\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value = {form.cp.value} onChange = {e => handleInputChange(e)}></input>\n                  {form.cp.error &&\n                  <div className=\"card-panel red accent-1\">\n                    {form.cp.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value= {type} disabled= {!isTypesValid(type)} checked= {hasType(type)} onChange = {e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport PokemonForm from '../components/pokemon-form';\nimport Pokemon from '../models/pokemon';\nimport PokemonService from '../services/pokemon-service';\n \ntype Params = { id: string };\n  \nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n      PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n            <h2 className=\"header center\">Ãditer { pokemon.name }</h2>\n            <PokemonForm pokemon={pokemon}></PokemonForm>\n        </div>\n      ) : (\n        <h4 className=\"center\">Aucun pokÃ©mon Ã  afficher !</h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonEdit;","import React, {FunctionComponent  } from 'react';\nimport PokemonList from './pages/pokemon-list';\nimport PokemonDetail from './pages/pokemon-detail';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport PageNotFound from './pages/page-not-found';\nimport PokemonEdit from './pages/pokemon-edit';\n\n\n  \nconst App: FunctionComponent = () => {\n\n \n\n return (\n    <Router>\n       <div>\n          {/* La barre de navigation commune Ã  toutes les pages */}\n          <nav>\n             <div className=\"nav-wrapper teal\">\n                <Link to=\"/pokedex\" className=\"brand-logo center\">PokÃ©dex</Link>\n             </div>\n          </nav>\n            {/* Le systeÃ¨me de gestion des routes de l'app */}\n          <Switch>\n             <Route exact path = \"/pokedex\" component = {PokemonList}/>\n             <Route exact path = \"/pokemons\" component = {PokemonList} />\n             <Route exact path = \"/pokemons/edit/:id\" component = {PokemonEdit} />\n             <Route path = \"/pokemons/:id\" component = {PokemonDetail} />\n             <Route component = {PageNotFound} />\n          </Switch>\n       </div>\n    </Router>\n )\n}\n\n\n\n  \nexport default App;","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './App';\n\nReactDom.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}